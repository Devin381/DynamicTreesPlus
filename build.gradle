import org.w3c.dom.Element

String property(String name) {
    return project.getProperty(name)
}

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

repositories {
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven {
        url "https://maven.tehnut.info"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url "https://harleyoconnor.com/maven"
    }
    //do not remove, this is for loading jars from the libs folder
    flatDir {
        dirs("libs")
    }
    mavenLocal()
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

String modName = property("modName")
String modVersion = property("modVersion")
String mcVersion = property("mcVersion")

version = "${mcVersion}-${modVersion}"
group = property("group")
archivesBaseName = modName

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'official', version: mcVersion

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            if (project.hasProperty('mcUuid')) {
                args '--uuid', property('mcUuid')
            }
            if (project.hasProperty('mcUsername')) {
                args '--username', property('mcUsername')
            }
            if (project.hasProperty('mcAccessToken')) {
                args '--accessToken', property('mcAccessToken')
            }

            mods {
                dynamictreesplus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                dynamictreesplus {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', 'dynamictreesplus', '--all', '--output', file('src/generated/resources/')

            mods {
                dynamictreesplus {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${property("forgeVersion")}"

    // Compile Hwyla API, but don't include in runtime.
    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${property("hwylaVersion")}:api")
    // At runtime, use the full Hwyla mod.
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${property("hwylaVersion")}")

    // Compile JEI API, but don't include in runtime.
    compileOnly fg.deobf("mezz.jei:jei-${mcVersion}:${property("jeiVersion")}:api")
    // At runtime, use the full JEI mod.
    runtimeOnly fg.deobf("mezz.jei:jei-${mcVersion}:${property("jeiVersion")}")

    // At runtime, use Patchouli mod (for the guide book, which is Json so we don't need the API).
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${property("patchouliVersion")}")

    // Runtime only serene seasons
    runtimeOnly fg.deobf("curse.maven:SereneSeasons-291874:3202233")

    // Compile Dynamic Trees, of course
    implementation fg.deobf("com.ferreusveritas.dynamictrees:DynamicTrees-${mcVersion}:${property("dynamicTreesVersion")}")
    //don't delete this, just comment it out
//    implementation fg.deobf("blank:DynamicTrees-1.16.5:0.10.0-Beta5")
}

jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "ferreusveritas",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": version,
                "Implementation-Vendor" : "ferreusveritas",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}

jar.finalizedBy('reobfJar')

java {
    withSourcesJar()
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            setArtifactId("${modName}-${mcVersion}")
            setVersion(modVersion)

            from components.java

            pom {
                url = "https://github.com/supermassimo/${modName}"
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://mit-license.org'
                    }
                }
                developers {
                    developer {
                        id = "ferreusveritas"
                        name = "Ferreus Veritas"
                    }
                    developer {
                        id = "supermassimo"
                        name = "Max Hyper"
                    }
                    developer {
                        id = "Harleyoc1"
                        name = "Harley O'Connor"
                        email = "Harleyoc1@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/supermassimo/${modName}.git"
                    developerConnection = "scm:git:ssh://github.com/supermassimo/${modName}.git"
                    url = "https://github.com/supermassimo/${modName}"
                }
            }

            pom.withXml { xmlProvider ->
                final Element element = xmlProvider.asElement();

                // Clear dependencies.
                element.getChildNodes().each { node ->
                    if (node.getNodeName() == "dependencies")
                        element.removeChild(node)
                }
            }
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
        if (project.hasProperty("harleyOConnorMavenUsername") && project.hasProperty("harleyOConnorMavenPassword")) {
            maven {
                name = "HarleyOConnorMaven"
                url = uri("https://harleyoconnor.com/maven")
                credentials {
                    username = property("harleyOConnorMavenUsername")
                    password = property("harleyOConnorMavenPassword")
                }
            }
        } else {
            project.logger.log(LogLevel.WARN, "Credentials for maven not detected; it will be disabled.")
        }
    }
}

idea {
    module {
        downloadSources = true
    }
}